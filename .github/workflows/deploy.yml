# 워크플로우의 이름
name: Github Actions 실행시켜보기

# 트리거 조건
on:
  push:
    branches:
      - main

# 1 워크플로우 - 여러 Job을 포함할 수 있다.
# 여러 Job은 기본적으로 병렬적으로 수행된다.
jobs:
  # Job의 고유 이름
  My-Deploy-Job:
    # 운영체제
    runs-on: ubuntu-latest

    # Step: 특정 작업을 수행하는 가장 작은 단위
    # Workflow - Job - Step
    steps:
      - name: Hello World 찍기
        run: echo "Hello World"

      - name: 명령어 여러개 실행하기
        run: |
          echo "Good"
          echo "Morning"

      - name: Github Actions 자체에 내장된 변수 사용하기
        run: |
          echo $GITHUB_SHA
          echo $GITHUB_REPOSITORY

      - name: sceret 값 사용하기
        run: |
          echo ${{ secrets.MY_NAME }}
          echo ${{ secrets.MY_HOBBY }}

  Spring-Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository에 올린 파일들을 불러오기
        uses: actions/checkout@v4
      - name : JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
      - name: application.yml 파일 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > src/main/resources/application.yml
        working-directory: spring_demo
      - name: 테스트 및 빌드
        run: ./gradlew clean build
        working-directory: spring_demo
      - name: 빌드 파일 이름 변경
        run: mv build/libs/*SNAPSHOT.jar ../project.jar
        working-directory: spring_demo
      - name: S3로 전송위해 압축하기
        run: tar -czvf ${{ github.sha }}.tar.gz project.jar appspec.yml scripts
      - name: AWS credential 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: S3로 파일 전송
        run: aws s3 cp --region ap-northeast-2 ./${{ github.sha }}.tar.gz s3://instagram-deploy-bucket/${{ github.sha }}.tar.gz
      - name: CodeDeploy 배포 시작
        run: aws deploy create-deployment
          --region ap-northeast-2
          --application-name instagram-server-deploy
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --deployment-group-name Production
          --s3-location bucket=instagram-deploy-bucket,bundleType=tgz,key=${{ github.sha }}.tar.gz
      # jar파일 전송해서 SSH로 직접 배포 스크립트
#      - name: SCP로 EC2로 파일 전송
#        uses: appleboy/scp-action@master
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC2_PRIVATE_KEY }}
#          source: spring_demo/project.jar
#          target: /home/ubuntu/spring_server/tobe
#          strip_components: 1 #파일 경로를 몇 단계까지 제거할 것인지
#      - name: SSH로 EC2 접속
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC2_PRIVATE_KEY }}
#          script_stop: true
#          script: |
#            rm -rf /home/ubuntu/spring_server/current
#            mkdir /home/ubuntu/spring_server/current
#            mv /home/ubuntu/spring_server/tobe/project.jar /home/ubuntu/spring_server/current/project.jar
#            cd /home/ubuntu/spring_server/current
#            sudo fuser -k -n tcp 8080 || true
#            nohup java -jar project.jar > ./output.log 2>&1 &
#            rm -rf /home/ubuntu/spring_server/tobe
#            echo "Deploy Success"
      # SSH통해 소스코드 당겨서 직접 빌드 및 배포
#      - name: SSH로 EC2 접속
#        uses: appleboy/ssh-action@master
#        env:
#          APPLICATION_PROPERTIES: ${{ secrets.APPLICATION_PROPERTIES }}
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC2_PRIVATE_KEY }}
#          envs: APPLICATION_PROPERTIES
#          script: |
#            cd /home/ubuntu/github-action-test/spring_demo
#            rm -rf src/main/resources/application.yml
#            sudo git pull origin main
#            echo "$APPLICATION_PROPERTIES" > src/main/resources/application.yml
#            ./gradlew clean build
#            sudo fuser -k -n tcp 8080 || true
#            nohup java -jar build/libs/*SNAPSHOT.jar > .output.log 2>&1 &
